import Link from "next/link"
import { FC } from "react"

const DocsSecurityImplementationsPage: FC = () => <article>
  <h1>
    Security Implementations
  </h1>

  <p>
    Passenger cares about your security. It is designed to be secure and safe. Here are a few security implementations that Passenger has:
  </p>

  <h2><mark>Encrypted Database</mark> with AES GCM</h2>

  <p>
    Passenger uses an encrypted database to store your passphrases. It uses AES
    means <mark>Advanced Encryption Standard</mark> with GCM means <mark>Galois/Counter
      Mode</mark> for encryption.
  </p>

  <p>
    AES is a symmetric encryption algorithm. That means the same key is used for both
    encryption and decryption. So you need a <mark>secret key</mark>.
  </p>

  <h3>How Secret Key is Stored?</h3>

  <p>
    Well, Passenger Core CLI does not store any secret key. Core works totally
    stateless. It means it does not store any data. It only processes the data and
    returns the result. So, where is the secret key stored?
  </p>

  <p>
    While using the passenger directly, from the terminal, you need to provide the
    secret key as an <mark>environment variable</mark>. For the CLI, you need to
    provide the secret key yourself. It is not stored anywhere. You may consider
    using an <mark>.env</mark> file to store the secret key.
  </p>

  <blockquote>
    Remember, it is not recommended to store the secret key in the .env file. It
    is just for demonstration purposes.
  </blockquote>

  <b>Example:</b>

  <pre>
    <code>{`SECRET_KEY=your_secret_key_here passenger login username master_passphrase
# or
export SECRET_KEY=your_secret_key_here
passenger login username master_passphrase
# or
source /path/to/.env # assuming .env file has SECRET_KEY
passenger login username master_passphrase`}</code>
  </pre>

  <p>
    Passenger Desktop and Server uses the core CLI internally. But they provide the
    secret key automatically. Server can be configured to use the secret key while
    running docker container. Desktop app saves the secret key from <mark>keychain
    </mark> or <mark>credential manager</mark> of the operating system.
  </p>

  <h2>Session Management</h2>

  <p>
    Passenger uses JWT means <mark>JSON Web Tokens</mark> for session management.
    JWT is a standard for token generation and verification. It is widely used in
    the industry.
  </p>

  <p>
    JWT is generated by Core and it is valid for <mark>10 minutes</mark>. After
    that, you need to generate a new token. JWT is used to authenticate the user.
    It is sent with every request to the server. Server verifies the token and
    then processes the request.
  </p>

  <strong>Example use of JWT:</strong>

  <pre>
    <code>{`export SECRET_KEY=your_secret_key_here
JWT=$(passenger login username master_passphrase)
passenger fetchAll $JWT
# or
passenger fetchAll \`passenger login username master_passphrase\`
# or
passenger fetchAll $(passenger login username master_passphrase)
`}</code>
  </pre>

  <h2>Secure Communication</h2>

  <p>
    Since this is a self-hosted application, you need to take care of secure
    communication yourself. Passenger, as expected, cannot do anything about
    it. <mark>You MUST create an SSL certificate</mark> for your domain to
    provide secure communication over <mark>HTTPS</mark>.
  </p>

  <blockquote>
    This is not related to Passenger Desktop client. Desktop client communicates
    with the CLI over <mark>system calls</mark>, not over the network. So, there is
    no need for SSL certificate for Desktop client.
  </blockquote>

  <h2>Secure Master Passphrase</h2>

  <p>
    Master passphrase is the passphrase that is used to generate JWT to
    authenticate. <strong>It is the only passphrase you need to remember.
    </strong> It is used to generate other passphrases. So, it is very important
    to keep it secure. Do not forget it. If you forget it, you will lose access
    to all your passphrases.
  </p>

  <p>
    Master passphrase have to be strong. You need to provide a variety of characters
    and at least 12 characters long.
  </p>

  <h2>Extra Step of Encryption</h2>

  <p>
    By default, Passenger uses a string reverse algorithm to <mark>encrypt the
      database second time</mark> (First time is with AES GCM). This provides an
    extra step of encryption. Yes, it is not a strong encryption algorithm. But
    the enjoyable part is this: <mark>You can use your own encryption algorithm</mark>.
  </p>

  <p>
    Passenger is an open-source project. You can modify the source code to <mark>
      create your own, unique Passenger version</mark>. Just modify the <Link href="https://github.com/Elagoht/Passenger-CLI/blob/main/src/Utilities/EnDeCoder.cs" rel="noopener noreferrer" target="_blank">EnDeCoder.cs</Link> file.
    Then compile it and if necessary, implement it to the web server or desktop client.
  </p>

  <blockquote>
    You must be sure that your encryption algorithm will not f*ck up the database.
  </blockquote>

  <blockquote>
    You also need some knowledge of C# programming language.
  </blockquote>

  <h2>Verified Builds</h2>

  <p>
    Passenger is never released via manually built binaries. All the binaries are
    built using <mark>GitHub Actions</mark>. So, you can be sure that the binary
    you are downloading is from the official source and not tampered. You can also
    build the binaries yourself if you want.
  </p>

  <h2>Conclusion</h2>

  <p>
    Passenger is designed to be secure. It uses AES GCM for encryption, JWT for
    session management, and a second algorithm for an extra step of encryption.
    You can also use your own encryption algorithm. Passenger is open-source, so
    you can modify the source code to create your own version of Passenger.
  </p>
</article>

export default DocsSecurityImplementationsPage